---
// Validator page for Excel files
---

<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Validador de Archivos Excel</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }
        
        .content {
            padding: 40px;
        }
        
        .upload-area {
            border: 3px dashed #ddd;
            border-radius: 10px;
            padding: 40px;
            text-align: center;
            margin-bottom: 30px;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .upload-area:hover {
            border-color: #4facfe;
            background-color: #f8f9ff;
        }
        
        .upload-area.dragover {
            border-color: #4facfe;
            background-color: #f0f8ff;
        }
        
        .upload-icon {
            font-size: 3rem;
            color: #ddd;
            margin-bottom: 20px;
        }
        
        .upload-text {
            font-size: 1.2rem;
            color: #666;
            margin-bottom: 10px;
        }
        
        .upload-subtext {
            color: #999;
            font-size: 0.9rem;
        }
        
        .file-input {
            display: none;
        }
        
        .btn {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 10px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(79, 172, 254, 0.3);
        }
        
        .results {
            margin-top: 30px;
            padding: 20px;
            border-radius: 10px;
            display: none;
        }
        
        .results.success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        
        .results.error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        
        .error-list {
            margin-top: 15px;
        }
        
        .error-item {
            background: white;
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
            border-left: 4px solid #dc3545;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }
        
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #4facfe;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .criteria {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        
        .criteria h3 {
            color: #333;
            margin-bottom: 15px;
        }
        
        .criteria ul {
            list-style-type: none;
            padding-left: 0;
        }
        
        .criteria li {
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        
        .criteria li:last-child {
            border-bottom: none;
        }
        
        .criteria li::before {
            content: "‚úì";
            color: #28a745;
            font-weight: bold;
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä Validador de Excel</h1>
            <p>Valida el formato de la pesta√±a "Proceso de cumplimiento"</p>
        </div>
        
        <div class="content">
            <div class="criteria">
                <h3>Criterios de Validaci√≥n:</h3>
                <ul>
                    <li><strong>Nombre del punto de control:</strong> Debe contener texto</li>
                    <li><strong>Descripci√≥n:</strong> Debe contener texto</li>
                    <li><strong>Criterios de evaluaci√≥n:</strong> Lista separada por comas</li>
                    <li><strong>Proceso:</strong> Lista separada por comas (puede estar vac√≠a)</li>
                    <li><strong>√Årea:</strong> Lista separada por comas (puede estar vac√≠a)</li>
                    <li><strong>Links a archivos:</strong> Enlaces v√°lidos a archivos de Google Drive (separados por saltos de l√≠nea)</li>
                </ul>
            </div>
            
            <div class="upload-area" id="uploadArea">
                <div class="upload-icon">üìÅ</div>
                <div class="upload-text">Arrastra tu archivo Excel aqu√≠</div>
                <div class="upload-subtext">o haz clic para seleccionar</div>
                <input type="file" id="fileInput" class="file-input" accept=".xlsx,.xls">
            </div>
            
            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>Validando archivo...</p>
            </div>
            
            <div class="results" id="results">
                <div id="resultsContent"></div>
            </div>
        </div>
    </div>

    <script>
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const loading = document.getElementById('loading');
        const results = document.getElementById('results');
        const resultsContent = document.getElementById('resultsContent');

        // Drag and drop functionality
        if (uploadArea && fileInput) {
            uploadArea.addEventListener('click', () => fileInput?.click());

            uploadArea.addEventListener('dragover', (e: DragEvent) => {
                 e.preventDefault();
                 uploadArea?.classList.add('dragover');
             });
 
             uploadArea.addEventListener('dragleave', () => {
                 uploadArea?.classList.remove('dragover');
             });
 
             uploadArea.addEventListener('drop', (e: DragEvent) => {
                 e.preventDefault();
                 uploadArea?.classList.remove('dragover');
                 const files = e.dataTransfer?.files;
                 if (files && files.length > 0) {
                     handleFile(files[0]);
                 }
             });
 
             fileInput.addEventListener('change', (e: Event) => {
                 const target = e.target as HTMLInputElement;
                 if (target && target.files && target.files.length > 0) {
                     handleFile(target.files[0]);
                 }
             });
        }

        function handleFile(file: File) {
            if (!file.name.match(/\.(xlsx|xls)$/)) {
                showError('Por favor, selecciona un archivo Excel v√°lido (.xlsx o .xls)');
                return;
            }

            if (loading) loading.style.display = 'block';
            if (results) results.style.display = 'none';

            const reader = new FileReader();
            reader.onload = function(e: ProgressEvent<FileReader>) {
                 try {
                     const result = e.target?.result;
                     if (result instanceof ArrayBuffer) {
                         const data = new Uint8Array(result);
                         const workbook = (window as any).XLSX.read(data, { type: 'array' });
                         validateExcel(workbook);
                     }
                 } catch (error) {
                     const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
                     showError('Error al leer el archivo: ' + errorMessage);
                 }
             };
            reader.readAsArrayBuffer(file);
        }

        function validateExcel(workbook: any) {
            const sheetName = 'Proceso de cumplimiento';
            
            if (!workbook.SheetNames.includes(sheetName)) {
                showError(`No se encontr√≥ la pesta√±a "${sheetName}" en el archivo.`);
                return;
            }

            const worksheet = workbook.Sheets[sheetName];
            const jsonData = (window as any).XLSX.utils.sheet_to_json(worksheet, { header: 1 });
            
            if (jsonData.length < 2) {
                showError('El archivo no contiene suficientes datos.');
                return;
            }

            const headers = jsonData[0];
            const requiredColumns: { [key: string]: number } = {
                'Nombre del punto de control': -1,
                'Descripcion': -1,
                'Criterios de evaluaci√≥n': -1,
                'Proceso': -1,
                'Area': -1,
                'Links a archivos': -1
            };

            // Find column indices
            headers.forEach((header: any, index: number) => {
                const normalizedHeader = header?.toString().trim();
                Object.keys(requiredColumns).forEach(reqCol => {
                    if (normalizedHeader && normalizedHeader.toLowerCase().includes(reqCol.toLowerCase())) {
                        requiredColumns[reqCol] = index;
                    }
                });
            });

            // Check if all required columns are found
            const missingColumns = Object.keys(requiredColumns).filter(col => requiredColumns[col] === -1);
            if (missingColumns.length > 0) {
                showError(`Columnas faltantes: ${missingColumns.join(', ')}`);
                return;
            }

            // Validate data
            const errors = [];
            for (let i = 1; i < jsonData.length; i++) {
                const row = jsonData[i];
                const rowNumber = i + 1;
                
                // Skip empty rows
                if (!row || row.every((cell: any) => !cell || cell.toString().trim() === '')) {
                    continue;
                }

                // Validate required text fields
                const nombreControl = row[requiredColumns['Nombre del punto de control']];
                if (!nombreControl || nombreControl.toString().trim() === '') {
                    errors.push(`Fila ${rowNumber}: "Nombre del punto de control" est√° vac√≠o`);
                }

                const descripcion = row[requiredColumns['Descripcion']];
                if (!descripcion || descripcion.toString().trim() === '') {
                    errors.push(`Fila ${rowNumber}: "Descripcion" est√° vac√≠o`);
                }

                // Validate comma-separated lists
                const criterios = row[requiredColumns['Criterios de evaluaci√≥n']];
                if (!criterios || criterios.toString().trim() === '') {
                    errors.push(`Fila ${rowNumber}: "Criterios de evaluaci√≥n" est√° vac√≠o`);
                } else if (!isValidCommaSeparatedList(criterios.toString())) {
                    errors.push(`Fila ${rowNumber}: "Criterios de evaluaci√≥n" no es una lista v√°lida separada por comas`);
                }

                // Proceso and Area can be empty, but if not empty, should be comma-separated
                const proceso = row[requiredColumns['Proceso']];
                if (proceso && proceso.toString().trim() !== '' && !isValidCommaSeparatedList(proceso.toString())) {
                    errors.push(`Fila ${rowNumber}: "Proceso" no es una lista v√°lida separada por comas`);
                }

                const area = row[requiredColumns['Area']];
                if (area && area.toString().trim() !== '' && !isValidCommaSeparatedList(area.toString())) {
                    errors.push(`Fila ${rowNumber}: "Area" no es una lista v√°lida separada por comas`);
                }

                // Validate Google Drive links
                 const links = row[requiredColumns['Links a archivos']];
                 if (links && links.toString().trim() !== '') {
                     const linkValidation = validateGoogleDriveLinks(links.toString());
                     if (!linkValidation.isValid) {
                         errors.push(`Fila ${rowNumber}: "Links a archivos" - ${linkValidation.error}`);
                     }
                 }
            }

            if (loading) loading.style.display = 'none';
             
             if (errors.length === 0) {
                 showSuccessWithData('‚úÖ El archivo es v√°lido y cumple con todos los criterios.', jsonData, requiredColumns);
             } else {
                 showErrors(errors);
             }
        }

        function isValidCommaSeparatedList(text: string) {
            const items = text.split(',').map((item: string) => item.trim());
            return items.length > 0 && items.every((item: string) => item.length > 0);
        }

        function validateGoogleDriveLinks(text: string) {
              const links = text.split('\n').map((link: string) => link.trim()).filter((link: string) => link !== '');
              const googleDriveFilePattern = /^https:\/\/drive\.google\.com\/file\/d\/[a-zA-Z0-9_-]+/;
              const googleDriveFolderPattern = /^https:\/\/drive\.google\.com\/drive\/folders\/[a-zA-Z0-9_-]+/;
              
              if (links.length === 0) {
                  return { isValid: false, error: 'No se encontraron enlaces v√°lidos' };
              }
              
              for (let i = 0; i < links.length; i++) {
                  const link = links[i];
                  if (!link.startsWith('https://')) {
                      return { isValid: false, error: `Enlace ${i + 1}: "${link}" no es una URL v√°lida (debe comenzar con https://)` };
                  }
                  
                  // Check if it's a Google Drive folder link
                  if (googleDriveFolderPattern.test(link)) {
                      return { isValid: false, error: `Enlace ${i + 1}: "${link}" es un enlace de carpeta de Google Drive. Solo se permiten enlaces a archivos individuales` };
                  }
                  
                  // Check if it's a valid Google Drive file link
                  if (!googleDriveFilePattern.test(link)) {
                      return { isValid: false, error: `Enlace ${i + 1}: "${link}" no es un enlace v√°lido de archivo de Google Drive` };
                  }
              }
              
              return { isValid: true, error: null };
          }

        function showSuccess(message: string) {
             if (results) results.className = 'results success';
             if (resultsContent) resultsContent.innerHTML = `<h3>${message}</h3>`;
             if (results) results.style.display = 'block';
         }

         function showSuccessWithData(message: string, jsonData: any[], requiredColumns: any) {
             if (results) results.className = 'results success';
             
             let html = `<h3>${message}</h3>`;
             html += '<h4 style="margin-top: 20px; margin-bottom: 15px;">üìã Contenido del archivo:</h4>';
             
             // Create a table to display the data
             html += '<div style="overflow-x: auto; max-height: 400px; border: 1px solid #ddd; border-radius: 5px;">';
             html += '<table style="width: 100%; border-collapse: collapse; font-size: 0.9em;">';
             
             // Header row
             html += '<thead style="background-color: #f8f9fa; position: sticky; top: 0;">';
             html += '<tr>';
             Object.keys(requiredColumns).forEach(col => {
                 html += `<th style="padding: 10px; border: 1px solid #ddd; text-align: left; font-weight: bold;">${col}</th>`;
             });
             html += '</tr>';
             html += '</thead>';
             
             // Data rows
             html += '<tbody>';
             for (let i = 1; i < jsonData.length; i++) {
                 const row = jsonData[i];
                 
                 // Skip empty rows
                 if (!row || row.every((cell: any) => !cell || cell.toString().trim() === '')) {
                     continue;
                 }
                 
                 html += '<tr style="border-bottom: 1px solid #eee;">';
                 Object.keys(requiredColumns).forEach(col => {
                     const colIndex = requiredColumns[col];
                     const cellValue = row[colIndex] || '';
                     // Handle comma-separated values and line-separated links as bullet lists
                      const commaListColumns = ['Criterios de evaluaci√≥n', 'Proceso', 'Area'];
                      const linkColumns = ['Links a archivos'];
                      let displayValue;
                      
                      if (commaListColumns.includes(col) && cellValue && cellValue.toString().includes(',')) {
                          // Create bullet list for comma-separated values
                          const items = cellValue.toString().split(',').map((item: string) => item.trim()).filter((item: string) => item);
                           displayValue = items.map((item: string) => `‚Ä¢ ${item}`).join('<br>');
                      } else if (linkColumns.includes(col) && cellValue && cellValue.toString().includes('\n')) {
                          // Create bullet list for line-separated links
                          const links = cellValue.toString().split('\n').map((link: string) => link.trim()).filter((link: string) => link);
                           displayValue = links.map((link: string) => `‚Ä¢ ${link}`).join('<br>');
                      } else {
                          // Truncate long text for display
                          displayValue = cellValue.toString().length > 100 
                              ? cellValue.toString().substring(0, 100) + '...' 
                              : cellValue.toString();
                      }
                     
                     html += `<td style="padding: 8px; border: 1px solid #ddd; vertical-align: top; max-width: 200px; word-wrap: break-word;">${displayValue}</td>`;
                 });
                 html += '</tr>';
             }
             html += '</tbody>';
             html += '</table>';
             html += '</div>';
             
             html += '<p style="margin-top: 15px; font-size: 0.9em; color: #666;">üí° Revisa que toda la informaci√≥n necesaria est√© presente y sea correcta.</p>';
             
             if (resultsContent) resultsContent.innerHTML = html;
             if (results) results.style.display = 'block';
         }

        function showError(message: string) {
             if (loading) loading.style.display = 'none';
             if (results) results.className = 'results error';
             if (resultsContent) resultsContent.innerHTML = `<h3>‚ùå Error de Validaci√≥n</h3><p>${message}</p>`;
             if (results) results.style.display = 'block';
         }
 
         function showErrors(errors: string[]) {
             if (results) results.className = 'results error';
             let errorHtml = `<h3>‚ùå Se encontraron ${errors.length} error(es):</h3><div class="error-list">`;
             errors.forEach((error: string) => {
                 errorHtml += `<div class="error-item">${error}</div>`;
             });
             errorHtml += '</div>';
             if (resultsContent) resultsContent.innerHTML = errorHtml;
             if (results) results.style.display = 'block';
         }
    </script>
</body>
</html>